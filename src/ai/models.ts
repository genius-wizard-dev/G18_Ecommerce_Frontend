import { PRODUCT_CATEGORIES } from "@/components/shop/ProductForm";
import { createGoogleGenerativeAI } from "@ai-sdk/google";
import { generateObject, generateText } from "ai";
import { z } from "zod";
import {
  addProductToCart,
  deleteCartItem,
  fetchProductByCategory,
  getCart,
  getTopOrder,
  updateCartItem,
} from "./tools";

// ƒê·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu cho l·ªãch s·ª≠ tin nh·∫Øn
interface ChatMessage {
  role: "user" | "assistant";
  content: string;
  toolsData?: any; // L∆∞u d·ªØ li·ªáu t·ª´ c√¥ng c·ª• nh∆∞ danh s√°ch s·∫£n ph·∫©m, ƒë∆°n h√†ng...
}

export class AIService {
  private model;
  private readonly CHAT_HISTORY_KEY = "g18_chat_history";
  private readonly MAX_HISTORY_MESSAGES = 3;

  constructor(apiKey = import.meta.env.VITE_GOOGLE_GENERATIVE_AI_API_KEY) {
    const googleAI = createGoogleGenerativeAI({
      apiKey,
    });

    this.model = googleAI("gemini-2.0-flash");
  }

  /**
   * L·∫•y l·ªãch s·ª≠ chat t·ª´ localStorage
   */
  private getChatHistory(): ChatMessage[] {
    try {
      const history = localStorage.getItem(this.CHAT_HISTORY_KEY);
      return history ? JSON.parse(history) : [];
    } catch (error) {
      console.error("L·ªói khi ƒë·ªçc l·ªãch s·ª≠ chat:", error);
      return [];
    }
  }

  /**
   * L∆∞u tin nh·∫Øn v√†o l·ªãch s·ª≠ chat
   */
  private saveChatMessage(message: ChatMessage) {
    try {
      let history = this.getChatHistory();
      history.push(message);

      // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng tin nh·∫Øn l∆∞u tr·ªØ
      if (history.length > this.MAX_HISTORY_MESSAGES * 2) {
        // Nh√¢n 2 v√¨ m·ªói t∆∞∆°ng t√°c c√≥ 2 tin nh·∫Øn (user + assistant)
        history = history.slice(-this.MAX_HISTORY_MESSAGES * 2);
      }

      localStorage.setItem(this.CHAT_HISTORY_KEY, JSON.stringify(history));
    } catch (error) {
      console.error("L·ªói khi l∆∞u tin nh·∫Øn:", error);
    }
  }

  clearChatHistory() {
    localStorage.removeItem(this.CHAT_HISTORY_KEY);
  }

  /**
   * T·∫°o vƒÉn b·∫£n d·ª±a tr√™n prompt
   * @param prompt C√¢u l·ªánh ƒë·∫ßu v√†o
   * @returns VƒÉn b·∫£n ƒë∆∞·ª£c t·∫°o ra v√† d·ªØ li·ªáu t·ª´ c√¥ng c·ª•
   */
  async generateText(prompt: string, userId: string) {
    try {
      let toolsData = null;

      // L·∫•y l·ªãch s·ª≠ chat ƒë·ªÉ th√™m v√†o context
      const chatHistory = this.getChatHistory();

      // T·∫°o c√°c tin nh·∫Øn l·ªãch s·ª≠ ƒë·ªÉ th√™m v√†o context
      const historyMessages = chatHistory.map((msg) => ({
        role: msg.role,
        content: msg.content,
        // Th√™m d·ªØ li·ªáu c√¥ng c·ª• v√†o n·ªôi dung n·∫øu c√≥
        ...(msg.toolsData
          ? {
              toolsData: JSON.stringify(msg.toolsData),
            }
          : {}),
      }));

      const { text, steps } = await generateText({
        model: this.model,
        tools: {
          fetchProductByCategory,
          getTopOrder,
          addProductToCart,
          getCart,
          updateCartItem,
          deleteCartItem,
        },
        messages: [
          {
            role: "system",
            content: `
            B·∫°n l√† AI G18, tr·ª£ l√Ω th√¥ng minh trong h·ªá th·ªëng th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠ G18. B·∫°n c√≥ th·ªÉ th·ª±c hi·ªán nhi·ªÅu t√°c v·ª• kh√°c nhau li√™n quan ƒë·∫øn s·∫£n ph·∫©m, gi·ªè h√†ng, h√≥a ƒë∆°n v√† th√¥ng tin mua s·∫Øm. H√£y ph·∫£n h·ªìi linh ho·∫°t t√πy theo ng·ªØ c·∫£nh y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng.

          Nguy√™n t·∫Øc ph·∫£n h·ªìi:
          - N·∫øu ƒë∆∞·ª£c h·ªèi b·∫°n l√† AI g√¨, h√£y tr·∫£ l·ªùi: "T√¥i l√† AI G18, tr·ª£ l√Ω AI c·ªßa G18. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?"
          - N·∫øu ng∆∞·ªùi d√πng y√™u c·∫ßu **hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m**, h√£y tr·∫£ v·ªÅ d·∫°ng markdown:
            ‚Ä¢ M·ªói s·∫£n ph·∫©m c√≥ ti√™u ƒë·ªÅ v·ªõi emoji üõçÔ∏è v√† s·ªë th·ª© t·ª±.
            ‚Ä¢ T√™n s·∫£n ph·∫©m l√† link markdown d·∫°ng: [T√™n s·∫£n ph·∫©m](/product/id)
            ‚Ä¢ M·ªói s·∫£n ph·∫©m c√°ch nhau b·∫±ng ƒë∆∞·ªùng k·∫ª ngang '---'
            ‚Ä¢ Hi·ªÉn th·ªã ƒë√∫ng markdown, c√≥ xu·ªëng d√≤ng r√µ r√†ng.

          - N·∫øu ng∆∞·ªùi d√πng g·ª≠i y√™u c·∫ßu ki·ªÉm tra **gi·ªè h√†ng** ho·∫∑c **h√≥a ƒë∆°n**:
            ‚Ä¢ H√£y ph√¢n t√≠ch v√† x√°c ƒë·ªãnh c√°c m·ª•c h√†ng, s·ªë l∆∞·ª£ng, t·ªïng ti·ªÅn, thu·∫ø (n·∫øu c√≥), ƒë·ªãnh d·∫°ng ƒë·∫ßu ra r√µ r√†ng, d·ªÖ hi·ªÉu.
            ‚Ä¢ N·∫øu c√≥ l·ªói (thi·∫øu s·∫£n ph·∫©m, s·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá...), h√£y th√¥ng b√°o c·ª• th·ªÉ l·ªói v√† ƒë·ªÅ xu·∫•t ch·ªânh s·ª≠a.

          - N·∫øu ng∆∞·ªùi d√πng d√πng ti·∫øng Vi·ªát ƒë·ªÉ n√≥i danh m·ª•c s·∫£n ph·∫©m, h√£y t·ª± ƒë·ªông √°nh x·∫° sang ti·∫øng Anh d·ª±a tr√™n danh s√°ch sau:
            ${PRODUCT_CATEGORIES.map(
              (category) => `${category.label} => ${category.value}`
            ).join(", ")}

          - N·∫øu ng∆∞·ªùi d√πng mu·ªën th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng sau khi b·∫°n ƒë√£ li·ªát k√™ danh s√°ch s·∫£n ph·∫©m:
            ‚Ä¢ Ph√¢n t√≠ch tin nh·∫Øn tr∆∞·ªõc ƒë√≥ ƒë·ªÉ t√¨m ID s·∫£n ph·∫©m m√† ng∆∞·ªùi d√πng mu·ªën th√™m.
            ‚Ä¢ S·ª≠ d·ª•ng tool addProductToCart v·ªõi ID s·∫£n ph·∫©m ƒë√£ x√°c ƒë·ªãnh v√† s·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng y√™u c·∫ßu (m·∫∑c ƒë·ªãnh l√† 1).
            ‚Ä¢ Th√¥ng b√°o k·∫øt qu·∫£ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng m·ªôt c√°ch r√µ r√†ng.

          - QUAN TR·ªåNG: Khi ng∆∞·ªùi d√πng y√™u c·∫ßu th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng, h√£y ki·ªÉm tra d·ªØ li·ªáu toolsData trong l·ªãch s·ª≠ chat ƒë·ªÉ t√¨m ID s·∫£n ph·∫©m.
            ‚Ä¢ N·∫øu c√≥ nhi·ªÅu s·∫£n ph·∫©m, h√£y h·ªèi ng∆∞·ªùi d√πng mu·ªën th√™m s·∫£n ph·∫©m n√†o.
            ‚Ä¢ N·∫øu ng∆∞·ªùi d√πng ƒë·ªÅ c·∫≠p ƒë·∫øn t√™n s·∫£n ph·∫©m, h√£y t√¨m ID t∆∞∆°ng ·ª©ng trong d·ªØ li·ªáu l·ªãch s·ª≠.
            ‚Ä¢ Lu√¥n s·ª≠ d·ª•ng ID ch√≠nh x√°c khi g·ªçi tool addProductToCart.

          Th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i: userId=${userId}

          Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, tr√¨nh b√†y r√µ r√†ng, h·∫•p d·∫´n, d√πng markdown n·∫øu ph√π h·ª£p, v√† s·ª≠ d·ª•ng emoji ƒë·ªÉ tƒÉng t√≠nh th√¢n thi·ªán n·∫øu c·∫ßn.
          L∆∞u √Ω kh√¥ng tr·∫£ v·ªÅ b·∫•t k·ª≥ ID, cartItemId n√†o ra giao di·ªán ho·∫∑c trong c√¢u tr·∫£ l·ªùi, ch·ªâ tr·∫£ v·ªÅ th√¥ng tin s·∫£n ph·∫©m, gi·ªè h√†ng, h√≥a ƒë∆°n.
          V·ªõi c√°c thao t√°c update ho·∫∑c x√≥a gi·ªè h√†ng h√£y y√™u c·∫ßu l·∫•y danh s√°ch s·∫£n ph·∫©m trong gi·ªè h√†ng tr∆∞·ªõc.
          `,
          },

          ...historyMessages,
          {
            role: "user",
            content: prompt,
          },
        ],
        maxSteps: 5,
      });

      // L∆∞u tin nh·∫Øn ng∆∞·ªùi d√πng
      this.saveChatMessage({
        role: "user",
        content: prompt,
      });

      // Ch·ªâ l∆∞u k·∫øt qu·∫£ v√† t√™n c√¥ng c·ª• t·ª´ c√°c b∆∞·ªõc
      const allToolsData = steps
        .filter(
          (step) =>
            step.toolCalls && step.toolCalls.length > 0 && step.toolResults
        )
        .map((step) => {
          if (step.toolCalls && step.toolCalls.length > 0 && step.toolResults) {
            return {
              toolName: step.toolCalls[0].toolName,
              result: step.toolResults[0].result,
            };
          }
          return null;
        })
        .filter((data) => data !== null);

      if (allToolsData.length > 0) {
        toolsData = allToolsData.length === 1 ? allToolsData[0] : allToolsData;
      }

      // L∆∞u ph·∫£n h·ªìi c·ªßa AI
      this.saveChatMessage({
        role: "assistant",
        content: text,
        toolsData: toolsData,
      });

      return text;
    } catch (error) {
      console.error("L·ªói khi t·∫°o vƒÉn b·∫£n:", error);
      throw error;
    }
  }

  async checkProduct(file: File) {
    try {
      const imageBuffer = await file.arrayBuffer();
      const base64Image = btoa(
        new Uint8Array(imageBuffer).reduce(
          (data, byte) => data + String.fromCharCode(byte),
          ""
        )
      );

      const { object } = await generateObject({
        model: this.model,
        messages: [
          {
            role: "system",
            content: `B·∫°n l√† m·ªôt AI ƒë√°nh gi√° h√¨nh ·∫£nh, nhi·ªám v·ª• c·ªßa b·∫°n l√† ki·ªÉm tra xem h√¨nh ·∫£nh c√≥ ch·ª©a n·ªôi dung vi ph·∫°m nh∆∞: thu·ªëc l√°, r∆∞·ª£u bia, ch·∫•t c·∫•m, v≈© kh√≠ ho·∫∑c h√¨nh ·∫£nh tr√°i ph√©p hay kh√¥ng; n·∫øu ·∫£nh vi ph·∫°m, h√£y tr·∫£ v·ªÅ l√Ω do m√¥ t·∫£ r√µ n·ªôi dung vi ph·∫°m (v√≠ d·ª•: ·∫£nh c√≥ ch·ª©a ƒëi·∫øu thu·ªëc, chai r∆∞·ª£u, v≈© kh√≠...); lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, tr√¨nh b√†y r√µ r√†ng, d·ªÖ hi·ªÉu, c√≥ s·ª≠ d·ª•ng emoji ph√π h·ª£p n·∫øu c·∫ßn.`,
          },
          {
            role: "user",
            content: [
              {
                type: "image",
                image: base64Image,
              },
            ],
          },
        ],

        schema: z.object({
          isValid: z.boolean(),
          reason: z.string().optional().describe("L√Ω do n·∫øu isValid l√† false"),
        }),
      });

      return object;
    } catch (error) {
      console.error("L·ªói khi ph√¢n t√≠ch h√¨nh ·∫£nh:", error);
      throw error;
    }
  }

  async generateProductDescription(file: File): Promise<string> {
    try {
      // Chuy·ªÉn ƒë·ªïi File th√†nh d·ªØ li·ªáu base64
      const imageBuffer = await file.arrayBuffer();
      const base64Image = btoa(
        new Uint8Array(imageBuffer).reduce(
          (data, byte) => data + String.fromCharCode(byte),
          ""
        )
      );

      const { text } = await generateText({
        model: this.model,
        messages: [
          {
            role: "system",
            content:
              "B·∫°n l√† chuy√™n gia t·∫°o m√¥ t·∫£ s·∫£n ph·∫©m t·ª´ h√¨nh ·∫£nh. D·ª±a tr√™n h√¨nh ·∫£nh, vi·∫øt m√¥ t·∫£ ng·∫Øn g·ªçn (t·ªëi ƒëa 150 t·ª´), t·∫≠p trung v√†o t√≠nh nƒÉng, c√¥ng d·ª•ng v√† l·ª£i √≠ch. S·ª≠ d·ª•ng ng√¥n ng·ªØ t·ª± nhi√™n, h·∫•p d·∫´n, d·ªÖ hi·ªÉu. Ch·ªâ vi·∫øt m√¥ t·∫£, kh√¥ng th√™m ti√™u ƒë·ªÅ hay th√¥ng tin kh√°c'. Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, Lu√¥n c√≥ ƒë·ªãnh markdown xu·ªëng h√†ng ph√¢n chia th·∫≠t ƒë·∫πp, d√πng emoji khi ph√π h·ª£p.",
          },
          {
            role: "user",
            content: [
              {
                type: "image",
                image: base64Image,
              },
            ],
          },
        ],
      });
      return text;
    } catch (error) {
      console.error("L·ªói khi ph√¢n t√≠ch h√¨nh ·∫£nh:", error);
      throw error;
    }
  }
}

export const aiService = new AIService();
