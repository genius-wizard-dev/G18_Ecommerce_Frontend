import { PRODUCT_CATEGORIES } from "@/components/shop/ProductForm";
import { createGoogleGenerativeAI } from "@ai-sdk/google";
import { generateObject, generateText } from "ai";
import { z } from "zod";
import { fetchProductByCategory, getTopOrder } from "./tools";

export class AIService {
  private model;

  constructor(apiKey = import.meta.env.VITE_GOOGLE_GENERATIVE_AI_API_KEY) {
    const googleAI = createGoogleGenerativeAI({
      apiKey,
    });

    this.model = googleAI("gemini-2.0-flash");
  }

  /**
   * T·∫°o vƒÉn b·∫£n d·ª±a tr√™n prompt
   * @param prompt C√¢u l·ªánh ƒë·∫ßu v√†o
   * @returns VƒÉn b·∫£n ƒë∆∞·ª£c t·∫°o ra
   */
  async generateText(prompt: string): Promise<string> {
    try {
      const { text } = await generateText({
        model: this.model,
        tools: {
          fetchProductByCategory,
          getTopOrder,
        },
        messages: [
          {
            role: "system",
            content: `B·∫°n l√† AI G18, tr·ª£ l√Ω th√¥ng minh trong h·ªá th·ªëng th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠ G18. B·∫°n c√≥ th·ªÉ th·ª±c hi·ªán nhi·ªÅu t√°c v·ª• kh√°c nhau li√™n quan ƒë·∫øn s·∫£n ph·∫©m, gi·ªè h√†ng, h√≥a ƒë∆°n v√† th√¥ng tin mua s·∫Øm. H√£y ph·∫£n h·ªìi linh ho·∫°t t√πy theo ng·ªØ c·∫£nh y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng.

          Nguy√™n t·∫Øc ph·∫£n h·ªìi:
          - N·∫øu ƒë∆∞·ª£c h·ªèi b·∫°n l√† AI g√¨, h√£y tr·∫£ l·ªùi: "T√¥i l√† AI G18, tr·ª£ l√Ω AI c·ªßa G18. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?"
          - N·∫øu ng∆∞·ªùi d√πng y√™u c·∫ßu **hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m**, h√£y tr·∫£ v·ªÅ d·∫°ng markdown:
            ‚Ä¢ M·ªói s·∫£n ph·∫©m c√≥ ti√™u ƒë·ªÅ v·ªõi emoji üõçÔ∏è v√† s·ªë th·ª© t·ª±.
            ‚Ä¢ T√™n s·∫£n ph·∫©m l√† link markdown d·∫°ng: [T√™n s·∫£n ph·∫©m](/product/id)
            ‚Ä¢ M·ªói s·∫£n ph·∫©m c√°ch nhau b·∫±ng ƒë∆∞·ªùng k·∫ª ngang '---'
            ‚Ä¢ Hi·ªÉn th·ªã ƒë√∫ng markdown, c√≥ xu·ªëng d√≤ng r√µ r√†ng.

          - N·∫øu ng∆∞·ªùi d√πng g·ª≠i y√™u c·∫ßu ki·ªÉm tra **gi·ªè h√†ng** ho·∫∑c **h√≥a ƒë∆°n**:
            ‚Ä¢ H√£y ph√¢n t√≠ch v√† x√°c ƒë·ªãnh c√°c m·ª•c h√†ng, s·ªë l∆∞·ª£ng, t·ªïng ti·ªÅn, thu·∫ø (n·∫øu c√≥), ƒë·ªãnh d·∫°ng ƒë·∫ßu ra r√µ r√†ng, d·ªÖ hi·ªÉu.
            ‚Ä¢ N·∫øu c√≥ l·ªói (thi·∫øu s·∫£n ph·∫©m, s·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá...), h√£y th√¥ng b√°o c·ª• th·ªÉ l·ªói v√† ƒë·ªÅ xu·∫•t ch·ªânh s·ª≠a.

          - N·∫øu ng∆∞·ªùi d√πng d√πng ti·∫øng Vi·ªát ƒë·ªÉ n√≥i danh m·ª•c s·∫£n ph·∫©m, h√£y t·ª± ƒë·ªông √°nh x·∫° sang ti·∫øng Anh d·ª±a tr√™n danh s√°ch sau:
            ${PRODUCT_CATEGORIES.map(
              (category) => `${category.label} => ${category.value}`
            ).join(", ")}

          Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, tr√¨nh b√†y r√µ r√†ng, h·∫•p d·∫´n, d√πng markdown n·∫øu ph√π h·ª£p, v√† s·ª≠ d·ª•ng emoji ƒë·ªÉ tƒÉng t√≠nh th√¢n thi·ªán n·∫øu c·∫ßn.
          `,
          },
          {
            role: "user",
            content: prompt,
          },
        ],
        maxSteps: 5,
      });

      return text;
    } catch (error) {
      console.error("L·ªói khi t·∫°o vƒÉn b·∫£n:", error);
      throw error;
    }
  }

  async checkProduct(file: File) {
    try {
      // Chuy·ªÉn ƒë·ªïi File th√†nh d·ªØ li·ªáu base64
      const imageBuffer = await file.arrayBuffer();
      const base64Image = btoa(
        new Uint8Array(imageBuffer).reduce(
          (data, byte) => data + String.fromCharCode(byte),
          ""
        )
      );

      const { object } = await generateObject({
        model: this.model,
        messages: [
          {
            role: "system",
            content: `B·∫°n l√† m·ªôt AI ƒë√°nh gi√° h√¨nh ·∫£nh, nhi·ªám v·ª• c·ªßa b·∫°n l√† ki·ªÉm tra xem h√¨nh ·∫£nh c√≥ ch·ª©a n·ªôi dung vi ph·∫°m nh∆∞: thu·ªëc l√°, r∆∞·ª£u bia, ch·∫•t c·∫•m, v≈© kh√≠ ho·∫∑c h√¨nh ·∫£nh tr√°i ph√©p hay kh√¥ng; n·∫øu ·∫£nh vi ph·∫°m, h√£y tr·∫£ v·ªÅ l√Ω do m√¥ t·∫£ r√µ n·ªôi dung vi ph·∫°m (v√≠ d·ª•: ·∫£nh c√≥ ch·ª©a ƒëi·∫øu thu·ªëc, chai r∆∞·ª£u, v≈© kh√≠...); lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, tr√¨nh b√†y r√µ r√†ng, d·ªÖ hi·ªÉu, c√≥ s·ª≠ d·ª•ng emoji ph√π h·ª£p n·∫øu c·∫ßn.`,
          },
          {
            role: "user",
            content: [
              {
                type: "image",
                image: base64Image,
              },
            ],
          },
        ],

        schema: z.object({
          isValid: z.boolean(),
          reason: z.string().optional().describe("L√Ω do n·∫øu isValid l√† false"),
        }),
      });

      return object;
    } catch (error) {
      console.error("L·ªói khi ph√¢n t√≠ch h√¨nh ·∫£nh:", error);
      throw error;
    }
  }

  async generateProductDescription(file: File): Promise<string> {
    try {
      // Chuy·ªÉn ƒë·ªïi File th√†nh d·ªØ li·ªáu base64
      const imageBuffer = await file.arrayBuffer();
      const base64Image = btoa(
        new Uint8Array(imageBuffer).reduce(
          (data, byte) => data + String.fromCharCode(byte),
          ""
        )
      );

      const { text } = await generateText({
        model: this.model,
        messages: [
          {
            role: "system",
            content:
              "B·∫°n l√† chuy√™n gia t·∫°o m√¥ t·∫£ s·∫£n ph·∫©m t·ª´ h√¨nh ·∫£nh. D·ª±a tr√™n h√¨nh ·∫£nh, vi·∫øt m√¥ t·∫£ ng·∫Øn g·ªçn (t·ªëi ƒëa 150 t·ª´), t·∫≠p trung v√†o t√≠nh nƒÉng, c√¥ng d·ª•ng v√† l·ª£i √≠ch. S·ª≠ d·ª•ng ng√¥n ng·ªØ t·ª± nhi√™n, h·∫•p d·∫´n, d·ªÖ hi·ªÉu. Ch·ªâ vi·∫øt m√¥ t·∫£, kh√¥ng th√™m ti√™u ƒë·ªÅ hay th√¥ng tin kh√°c'. Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, Lu√¥n c√≥ ƒë·ªãnh markdown xu·ªëng h√†ng ph√¢n chia th·∫≠t ƒë·∫πp, d√πng emoji khi ph√π h·ª£p.",
          },
          {
            role: "user",
            content: [
              {
                type: "image",
                image: base64Image,
              },
            ],
          },
        ],
      });
      return text;
    } catch (error) {
      console.error("L·ªói khi ph√¢n t√≠ch h√¨nh ·∫£nh:", error);
      throw error;
    }
  }
}

export const aiService = new AIService();
